{"ast":null,"code":"var _jsxFileName = \"/home/anish/Downloads/my-pagebuilder/src/table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Component } from \"react\"; //import ReactDOM from \"react-dom\";\n//import styled from \"styled-components\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  /** \"selected\" here is state variable which will hold the\n   * value of currently selected dropdown.\n   */\n  const [selected, setSelected] = React.useState(\"\");\n  /** Function that will set different values to state variable\n   * based on which dropdown is selected\n   */\n\n  const changeSelectOptionHandler = event => {\n    setSelected(event.target.value);\n  };\n  /** Different arrays for different dropdowns */\n\n\n  const algorithm = [\"Searching Algorithm\", \"Sorting Algorithm\", \"Graph Algorithm\"];\n  const language = [\"C++\", \"Java\", \"Python\", \"C#\"];\n  const dataStructure = [\"Arrays\", \"LinkedList\", \"Stack\", \"Queue\"];\n  /** Type variable to store different array for different dropdown */\n\n  let type = null;\n  /** This will be used to create set of options that user will see */\n\n  let options = null;\n  /** Setting Type variable according to dropdown */\n\n  if (selected === \"Algorithm\") {\n    type = algorithm;\n  } else if (selected === \"Language\") {\n    type = language;\n  } else if (selected === \"Data Structure\") {\n    type = dataStructure;\n  }\n  /** If \"Type\" is null or undefined then options will be null,\n   * otherwise it will create a options iterable based on our array\n   */\n\n\n  if (type) {\n    options = type.map(el => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: el\n    }, el, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"16px\",\n      margin: \"16px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: changeSelectOptionHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Choose...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Language\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Data Structure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          children:\n          /** This is where we have used our options variable */\n          options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"5JZuWEbSK7gWtQNUHwm+D/HbW5U=\");\n\n_c = App;\nexport default TableApp; // function TableApp() {\n//   // State with list of all checked item\n//   const [checked, setChecked] = useState([]);\n//   const checkList = [\"Apple\", \"Banana\", \"Tea\", \"Coffee\"];\n//   // Add/Remove checked item from list\n//   const handleCheck = (event) => {\n//     var updatedList = [...checked];\n//     if (event.target.checked) {\n//       updatedList = [...checked, event.target.value];\n//     } else {\n//       updatedList.splice(checked.indexOf(event.target.value), 1);\n//     }\n//     setChecked(updatedList);\n//   };\n//   // Generate string of checked items\n//   const checkedItems = checked.length\n//     ? checked.reduce((total, item) => {\n//         return total + \", \" + item;\n//       })\n//     : \"\";\n//   // Return classes based on whether item is checked\n//   var isChecked = (item) =>\n//     checked.includes(item) ? \"checked-item\" : \"not-checked-item\";\n//   return (\n//     <div className=\"app\">\n//       <div className=\"checkList\">\n//         <div className=\"title\">Your CheckList:</div>\n//         <div className=\"list-container\">\n//           {checkList.map((item, index) => (\n//             <div key={index}>\n//               <input value={item} type=\"checkbox\" onChange={handleCheck} />\n//               <span className={isChecked(item)}>{item}</span>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       <div>\n//         {`Items checked are: ${checkedItems}`}\n//       </div>\n//     </div>\n//   );\n// }\n// class TableApp extends Component {\n//     render() {\n//         var heading = ['Name', 'City', 'Course'];\n//         var body =\n//             [['Kapil', 'Jaipur', 'MCA'],\n//             ['Aakash', 'Hisar', 'Btech'],\n//             ['Mani', 'Ranchi', 'MSc'],\n//             ['Yash', 'Udaipur', 'Mtech']\n//             ];\n//         return (\n//             <div >\n//                 <Table heading={heading} body={body} />,\n//             </div>\n//         );\n//     }\n// }\n// class Table extends Component {\n//     render() {\n//         var heading = this.props.heading;\n//         var body = this.props.body;\n//         return (\n//             <table style={{ width: 500 }}>\n//                 <thead>\n//                     <tr>\n//                         {heading.map(head => <th>{head}</th>)}\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {body.map(row => <TableRow row={row} />)}\n//                 </tbody>\n//             </table>\n//         );\n//     }\n// }\n// class TableRow extends Component {\n//     render() {\n//         var row = this.props.row;\n//         return (\n//             <tr>\n//                 {row.map(val => <td>{val}</td>)}\n//             </tr>\n//         )\n//     }\n// }\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<Table />, rootElement);\n// export default TableApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/anish/Downloads/my-pagebuilder/src/table.js"],"names":["React","useState","Component","App","selected","setSelected","changeSelectOptionHandler","event","target","value","algorithm","language","dataStructure","type","options","map","el","padding","margin","TableApp"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AACA;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd;AACJ;AACA;AACI,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,KAAK,CAACC,QAAN,CAAe,EAAf,CAAhC;AAEA;AACJ;AACA;;AACI,QAAMK,yBAAyB,GAAIC,KAAD,IAAW;AAC3CF,IAAAA,WAAW,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFD;AAIA;;;AACA,QAAMC,SAAS,GAAG,CAChB,qBADgB,EAEhB,mBAFgB,EAGhB,iBAHgB,CAAlB;AAKA,QAAMC,QAAQ,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,IAA1B,CAAjB;AACA,QAAMC,aAAa,GAAG,CAAC,QAAD,EAAW,YAAX,EAAyB,OAAzB,EAAkC,OAAlC,CAAtB;AAEA;;AACA,MAAIC,IAAI,GAAG,IAAX;AAEA;;AACA,MAAIC,OAAO,GAAG,IAAd;AAEA;;AACA,MAAIV,QAAQ,KAAK,WAAjB,EAA8B;AAC5BS,IAAAA,IAAI,GAAGH,SAAP;AACD,GAFD,MAEO,IAAIN,QAAQ,KAAK,UAAjB,EAA6B;AAClCS,IAAAA,IAAI,GAAGF,QAAP;AACD,GAFM,MAEA,IAAIP,QAAQ,KAAK,gBAAjB,EAAmC;AACxCS,IAAAA,IAAI,GAAGD,aAAP;AACD;AAED;AACJ;AACA;;;AACI,MAAIC,IAAJ,EAAU;AACRC,IAAAA,OAAO,GAAGD,IAAI,CAACE,GAAL,CAAUC,EAAD,iBAAQ;AAAA,gBAAkBA;AAAlB,OAAaA,EAAb;AAAA;AAAA;AAAA;AAAA,YAAjB,CAAV;AACD;;AACD,sBACE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,MAAM,EAAE;AAFH,KADT;AAAA,2BAME;AAAA,8BACE;AAAA,+BAKE;AAAQ,UAAA,QAAQ,EAAEZ,yBAAlB;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cADF,eAaE;AAAA,+BACE;AAAA;AAEI;AACAQ,UAAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CA1EH;;GAAMX,G;;KAAAA,G;AA4EJ,eAAegB,QAAf,C,CAEF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import React, { useState, Component } from \"react\";\n//import ReactDOM from \"react-dom\";\n//import styled from \"styled-components\";\n  \n\nconst App = () => {\n    /** \"selected\" here is state variable which will hold the\n     * value of currently selected dropdown.\n     */\n    const [selected, setSelected] = React.useState(\"\");\n    \n    /** Function that will set different values to state variable\n     * based on which dropdown is selected\n     */\n    const changeSelectOptionHandler = (event) => {\n      setSelected(event.target.value);\n    };\n    \n    /** Different arrays for different dropdowns */\n    const algorithm = [\n      \"Searching Algorithm\",\n      \"Sorting Algorithm\",\n      \"Graph Algorithm\",\n    ];\n    const language = [\"C++\", \"Java\", \"Python\", \"C#\"];\n    const dataStructure = [\"Arrays\", \"LinkedList\", \"Stack\", \"Queue\"];\n    \n    /** Type variable to store different array for different dropdown */\n    let type = null;\n    \n    /** This will be used to create set of options that user will see */\n    let options = null;\n    \n    /** Setting Type variable according to dropdown */\n    if (selected === \"Algorithm\") {\n      type = algorithm;\n    } else if (selected === \"Language\") {\n      type = language;\n    } else if (selected === \"Data Structure\") {\n      type = dataStructure;\n    }\n    \n    /** If \"Type\" is null or undefined then options will be null,\n     * otherwise it will create a options iterable based on our array\n     */\n    if (type) {\n      options = type.map((el) => <option key={el}>{el}</option>);\n    }\n    return (\n      <div\n        style={{\n          padding: \"16px\",\n          margin: \"16px\",\n        }}\n      >\n        <form>\n          <div>\n            {/** Bind changeSelectOptionHandler to onChange method of select.\n             * This method will trigger every time different\n             * option is selected.\n             */}\n            <select onChange={changeSelectOptionHandler}>\n              <option>Choose...</option>\n              <option>Algorithm</option>\n              <option>Language</option>\n              <option>Data Structure</option>\n            </select>\n          </div>\n          <div>\n            <select>\n              {\n                /** This is where we have used our options variable */\n                options\n              }\n            </select>\n          </div>\n        </form>\n      </div>\n    );\n  };\n    \n  export default TableApp;\n\n// function TableApp() {\n//   // State with list of all checked item\n//   const [checked, setChecked] = useState([]);\n//   const checkList = [\"Apple\", \"Banana\", \"Tea\", \"Coffee\"];\n\n//   // Add/Remove checked item from list\n//   const handleCheck = (event) => {\n//     var updatedList = [...checked];\n//     if (event.target.checked) {\n//       updatedList = [...checked, event.target.value];\n//     } else {\n//       updatedList.splice(checked.indexOf(event.target.value), 1);\n//     }\n//     setChecked(updatedList);\n//   };\n\n//   // Generate string of checked items\n//   const checkedItems = checked.length\n//     ? checked.reduce((total, item) => {\n//         return total + \", \" + item;\n//       })\n//     : \"\";\n\n//   // Return classes based on whether item is checked\n//   var isChecked = (item) =>\n//     checked.includes(item) ? \"checked-item\" : \"not-checked-item\";\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"checkList\">\n//         <div className=\"title\">Your CheckList:</div>\n//         <div className=\"list-container\">\n//           {checkList.map((item, index) => (\n//             <div key={index}>\n//               <input value={item} type=\"checkbox\" onChange={handleCheck} />\n//               <span className={isChecked(item)}>{item}</span>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       <div>\n//         {`Items checked are: ${checkedItems}`}\n//       </div>\n//     </div>\n//   );\n// }\n\n// class TableApp extends Component {\n//     render() {\n//         var heading = ['Name', 'City', 'Course'];\n//         var body =\n//             [['Kapil', 'Jaipur', 'MCA'],\n//             ['Aakash', 'Hisar', 'Btech'],\n//             ['Mani', 'Ranchi', 'MSc'],\n//             ['Yash', 'Udaipur', 'Mtech']\n//             ];\n//         return (\n//             <div >\n//                 <Table heading={heading} body={body} />,\n//             </div>\n//         );\n//     }\n// }\n  \n// class Table extends Component {\n//     render() {\n//         var heading = this.props.heading;\n//         var body = this.props.body;\n//         return (\n//             <table style={{ width: 500 }}>\n//                 <thead>\n//                     <tr>\n//                         {heading.map(head => <th>{head}</th>)}\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {body.map(row => <TableRow row={row} />)}\n//                 </tbody>\n//             </table>\n//         );\n//     }\n// }\n  \n// class TableRow extends Component {\n//     render() {\n//         var row = this.props.row;\n//         return (\n//             <tr>\n//                 {row.map(val => <td>{val}</td>)}\n//             </tr>\n//         )\n//     }\n// }\n\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<Table />, rootElement);\n\n// export default TableApp;"]},"metadata":{},"sourceType":"module"}